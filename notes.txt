Learn Signals: signal dispatchers. 
Serializerâ€™s, nest Serializers, 
Session & Token Authentication - how it works  

once migrations are done, 
Tasks models wont be seen on admin panel cos we've to register 
the models in django admin panel. 
-do this in apps, admin file. 

--
for class bases views, 
1st 
from django.views.generic.list import ListView

inheriting into the view class, the ListView has all the fucntions of ListView.
returns back a template with queries set of data

import the view class into urls and call .as_view()(from inherited views) since urlpatterns doesnt take class 
but only functions. 

by default django ListView looks for template <modelname>_list.html, 
if not exclusively defined, and passes object as object_list by default 

DetailView - more info on an item 
.views.generic.detail DetailView

TaskDetail(DetailView)->looks for <modelname>_detail.html
one object at a time instead of whole list. by primary_key
view by default looks for pk in url, primary key value in path, so set as int

<a href="{% url 'task' task.id %}">View</a>
'task'--> name of view in urlpatterns, task.id->passed to <int:pk>
'task' available throughout application as url for that view class/function.  
-----
********** 
CreateView
---

looks for task_form.html by default
CreateView by default gives a ModelForm, class representaion of a form based on a modelname, 
takes 'model'=Task and creates all the fields. 
or can set form_class = MyForm for custom form. 

--can list out fields like, fields = ['title', 'description']
or create all fields with fields='__all__'

have to add redirect after form submission. uses reverse_lazy import from urls 
success_url = reverse_lazy('tasks') -->name from urlpatterns

sends form=form to template--> {{form}}

*****
UpdateView

Same as CreateView but gives prefilled form and updates on submit. 
uses <int:pk> 

***
DeleteView, renders a 'are you sure?' page and 
delete on confirm via POST requst 

View looks for <modelname>_confirm_delete.html 

*************
************* 

Users, Auth. 
--can check user in inspect, memory, application,cookies, SessionId

*****
--LoginView

can use LoginView directly, and/or customise it as well. 

-provides default form, can specify fields, 
-redirect_authenticated_user --> default False, if user is authed, 
dont allow them on this page

DOUBT: get_success_url(self) why? not just success_url='tasks'

--can use LogoutView directly in urlpatterns and
add next_page for redirecting. 

***
Restricting views. 

--can use mixin- LoginRequiredMixin
-use it before the view inheritence 
--To redirect to login page add LOGIN_URL = 'login'

override get_context_data(self, **kwargs):
        context = 'to filter the object'

override form_valid(self, form): 
    check if the form instance user is logged in user 
    then return model value from view form to create task which has current user 
    assigned to user. 